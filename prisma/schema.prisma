// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For custom authentication
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations for NextAuth
  accounts Account[]
  sessions Session[]
  
  // Reading progress
  readingSessions ReadingSession[]
  
  // Notes
  notes Note[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model ReadingSession {
  id        String   @id @default(cuid())
  userId    String
  bookId    String   // This will store the Notion page ID directly
  readAt    DateTime @default(now())
  completed Boolean  @default(false)
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes Note[]
  
  // Ensure one reading session per user per day
  @@unique([userId, readAt])
  @@map("reading_sessions")
}

model Note {
  id               String         @id @default(cuid())
  content          String
  userId           String
  readingSessionId String
  bookId           String         // Store Notion page ID for easy reference
  bookTitle        String?        // Cache book title for search
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  readingSession ReadingSession @relation(fields: [readingSessionId], references: [id], onDelete: Cascade)
  
  @@map("notes")
}